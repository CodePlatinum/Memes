import telebot
from PIL import Image, ImageDraw, ImageFont
import os
from telebot import types
import time

BOT_TOKEN = '7666674896:AAHKXKmag-XlJMOM4iPKZsIHJDZDwTgO4VY'
bot = telebot.TeleBot(BOT_TOKEN)

TEMPLATE_FOLDER = 'templates'
user_data = {}

@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    keyboard = types.InlineKeyboardMarkup()
    templates = os.listdir(TEMPLATE_FOLDER)
    for template in templates:
        keyboard.add(types.InlineKeyboardButton(template, callback_data=template))
    bot.reply_to(message, "–í—ã–±–µ—Ä–∏ —à–∞–±–ª–æ–Ω:", reply_markup=keyboard)

@bot.callback_query_handler(func=lambda call: True)
def handle_template_selection(call):
    user_data[call.message.chat.id] = {'template': call.data}
    bot.send_message(call.message.chat.id, "‚úèÔ∏è –ù–∞–ø–∏—à–∏ —Ç–µ–∫—Å—Ç: –≤–µ—Ä—Ö | –Ω–∏–∑ (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ø—Ä–∏–≤–µ—Ç | –ø–æ–∫–∞)")
    bot.register_next_step_handler(call.message, handle_text_input)

def handle_text_input(message):
    if '|' not in message.text:
        bot.reply_to(message, "‚ö†Ô∏è –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç! –ò—Å–ø–æ–ª—å–∑—É–π: –≤–µ—Ä—Ö | –Ω–∏–∑")
        return

    user_data[message.chat.id]['text'] = message.text
    generate_meme(message)

def generate_meme(message):
    try:
        data = user_data.get(message.chat.id)
        if not data:
            bot.reply_to(message, "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            return

        top_text, bottom_text = data['text'].split('|')
        template_path = os.path.join(TEMPLATE_FOLDER, data['template'])

        img = Image.open(template_path).convert("RGB")
        draw = ImageDraw.Draw(img)
        width, height = img.size

        # üìê –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ —Ä–∞–∑–º–µ—Ä–∞ —à—Ä–∏—Ñ—Ç–∞ –ø–æ–¥ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        font_percent = 0.06 if width > 800 else 0.08

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç (—Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞ –≤—Å–µ—Ö —Å–∏—Å—Ç–µ–º–∞—Ö)
        try:
            font = ImageFont.truetype('fonts/Arial.ttf', int(min(width, height) * font_percent))  # –£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å
        except IOError:
            font = ImageFont.load_default()  # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —à—Ä–∏—Ñ—Ç, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å Arial

        def draw_text(text, y, shift_x=0, shift_y=0):
            text = text.upper().strip()
            bbox = draw.textbbox((0, 0), text, font=font)
            x = (width - (bbox[2] - bbox[0])) / 2 + shift_x
            y += shift_y
            for dx in [-2, -1, 0, 1, 2]:
                for dy in [-2, -1, 0, 1, 2]:
                    draw.text((x + dx, y + dy), text, font=font, fill='black')
            draw.text((x, y), text, font=font, fill='white')

        if "nye-da.jpg" in template_path:
            draw_text(top_text, 5, -20, 20)
            draw_text(bottom_text, height - 90, 20, 45)
        elif "doge.jpg" in template_path:
            draw_text(top_text, 5, -55, 2)
            draw_text(bottom_text, height - 50, 65, 10)
        else:
            draw_text(top_text, 10, -20, 20)
            draw_text(bottom_text, height - 20, 20, 45)

        output_path = f"meme_{message.chat.id}.jpg"
        img.save(output_path, format='JPEG', quality=95)
        with open(output_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo)
        os.remove(output_path)
        user_data.pop(message.chat.id, None)
    except Exception as e:
        bot.reply_to(message, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–µ–º–∞: {e}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def start_polling():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–π...")
    while True:
        try:
            # –ó–∞–ø—É—Å–∫–∞–µ–º polling –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
            bot.polling(non_stop=True, interval=1, timeout=60, long_polling_timeout=60)
        except Exception as e:
            print(f"–í–æ–∑–Ω–∏–∫–ª–∞ –æ—à–∏–±–∫–∞: {e}. –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 15 —Å–µ–∫—É–Ω–¥...")
            time.sleep(15)

if __name__ == '__main__':
    start_polling()
